
#include <xc.h>
#include "main_project.h"

#define DA PORTDbits.RD0 // Define data available from encoder
#define LCD_DATA PORTC
#define LCD_RS PORTAbits.RA0
#define LCD_E PORTAbits.RA1
#define SET LCD_sendCW(0b00111000)
#define D1C1 LCD_sendCW(0b00001100)
#define ENTRY LCD_sendCW(0b00000110)
#define CLEAR LCD_sendCW(0b00000001)
#define HOME LCD_sendCW(0b00000010)

void lcdmessage(int
);
void initLCD(void);
void LCD_sendCW(char x);
void LCD_sendData(char x);

char getkeypad();
void safetysound(void);
void warningsound(void);
void sevensegmentC(void);
void sevensegmentD(void);

void main() {
  
    
ADCON1 = 0x0F;         //allow usage of digital inputs for all pins
TRISA = 0b00000000;    //Declare extra output pins for LCD 
TRISB = 0b11001111;    //Declare inputs from RB0 to RB3 and output from RB4 and RB5 ignore RB6 and RB7 note: RB5 is speaker
TRISC = 0b00000000;    //Declare output pins for LCD
TRISD = 0b00000000;    //Declare outputs for 7 segment
TRISE = 0b00000000;    //LCD selector
char autodecision,tiltangle1,direction;
int invalid1,invalid2,invalid3;//loop back to first condition of if else statements
unsigned char i;
int e,m;
char x;


char MESS[][16] = {
				{"C TO AUTOPILOT"},
                {"D TO STEER"},
				{"INPUT TILT"},
                {"90 MAX"},
				{"A=LEFT"},
                {"B=RIGHT"},
				{"TURNING LEFT"},
                {"BOI"},
				{"TURNING RIGHT"},
                {"BOI"},
				{"INVALID INPUT"},
                {"BOI"}
};


    
    while(1){
        
    invalid1=0;
    e=0;
    lcd();
    
   
    
    autodecision=getkeypad();
    
     do{
         
       
    if(autodecision=='C'){
        e=1;
        lcd();
        //"input tilt 
        // 90 max"
    
        tiltangle1= getkeypad();
    
        //"A=left
        //B=right"
    
        
        do{
            invalid2=0;
            
            direction= getkeypad();
  
            if(direction=='A'){
            //"turning left"
                sevensegmentC();
                
            }

            else if(direction=='B'){
            //"turning right"
                sevensegmentC();
            }
            else{
            //"invalid input"
                 invalid2=1;
            } 
        }while(invalid2==1);   
    

        }//if1

    else if(autodecision=='D'){
        e=2;
        lcd();
        //"A=left
        //B=right"
       
        
        do{ 
        
        invalid3=0; 
        
         direction= getkeypad();
        
              
            if(direction=='B'){ //"turning right"
                sevensegmentD(); 
            }
           
    
       
            else if(direction=='A'){ //"Turing left"
                sevensegmentD();
            }
           
            
       
                else{//"invalid input"
                    invalid3=1;}
                    
        
        }while(invalid3==1); //do while loop to check direction for manual turn
                
        
    }//if2

    else{
        //"invalid input"
        invalid1=1;
    }

        }while(invalid1==1); //check autodecision for auto or not and loop again if invalid
        

    }//while(1)
}

char getkeypad(){
    

char value_needed[]={1,2,3,'F',4,5,6,'E',7,8,9,'D','A',0,'B','C' }; //look up table for inputs to encoder, index is binary expression
// char value_used; //value used from look up table
 char selection,selection2; //Declare for variable needed to perform lookup
 char value_used;
 
   selection= (PORTB & 0x0F); //Selection is the variable used to performed lookup, PORTC in binary expression also preserves inputs for rc0 to rc3. This statement reads input.
   _delay(80000);
   selection2= (PORTB & 0x0F);
   if(selection2==selection)
   {
    value_used=value_needed[selection];  //convert binary input into character through look up table
   }

return value_used;
} //keypad    

/*
void initLCD()
{
    LCD_sendCW(0b00111000);// Function Set 
    LCD_sendCW(0b00001100);
    LCD_sendCW(0b00000110);
    LCD_sendCW(0b00000001);
    LCD_sendCW(0b00000010);
}
*/
/*
void lcdmessage(void) {
    int e,m,i,x;
    char MESS[][16] = {
				{"C TO AUTOPILOT"},
                {"D TO STEER"},
				{"INPUT TILT"},
                {"90 MAX"},
				{"A=LEFT"},
                {"B=RIGHT"},
				{"TURNING LEFT"},
                {"BOI"},
				{"TURNING RIGHT"},
                {"BOI"},
				{"INVALID INPUT"},
                {"BOI"}
};
    while(1){
		LCD_sendCW(0b00000110);
        e=0;
		m=e*2;
		for(i=0;MESS[m][i]!=0;i++)
			LCD_sendData(MESS[m][i]);
        
        LCD_sendCW(0b11000000); //Next Line
        for(i=0;MESS[m][i]!=0;i++)
			LCD_sendData(MESS[m+1][i]);
        
		LCD_sendCW(0b00000001);
	}
}

void LCD_sendCW(char x)
{
	LCD_RS=0;
	LCD_E=1;
	LCD_DATA=x;
	LCD_E=0;
	_delay(1000);
}

void LCD_sendData(char x)
{
	LCD_RS=1;
	LCD_E=1;
	LCD_DATA=x;
	LCD_E=0;
	_delay(500);
}


char MESS[][32] = {
				{"PRESS C TO FLY STRAIGHT"},
				{"INPUT TILT SIMULATION"},
				{"TILT CORRECTED"},
				{"SELECT TURN DIRECTION"},
				{"TURNING RIGHT"},
				{"TURNING LEFT"},
				{"INVALID INPUT"}
				};

void lcdmessage()
{
	unsigned char i;
	int m=1;
    int e;
    char CW[5]={0b00111000,0b00001100,0b00000110,0b00000001,0b00000010};
	ADCON1=0x0F;
	TRISA=0b11111100;
	TRISC=0b00000000;
	
    SET;
	_delay(1);
	D1C1;
	_delay(1);
	ENTRY;
	_delay(1);
	CLEAR;
	_delay(1);
	HOME;
	_delay(1);//Init LCD replacement
    
    
	m= PORTC & 0xf;
	PORTC=m;
	for(i=0;MESS[m][i]!=0;i++)
		LCD_sendData(MESS[m][i]);
}


void LCD_sendCW(char x)
{
	LCD_RS=0;
	LCD_E=1;
	LCD_DATA=x;
	LCD_E=0;
	_delay(1000);
}

void LCD_sendData(char x)
{
	LCD_RS=0;
	LCD_E=1;
	LCD_DATA=x;
	LCD_E=0;
	_delay(500);
}
*/

void sevensegmentD(void)
{
int display[10] = {0b1111110, 0b0110000, 0b1101101, 0b1111001, 0b0110011, 0b1011011, 0b1011111, 0b1110000,0b1111111,0b1111011};   //CC lookup table
int  HN = 0, LN = 0;
int t;

	
				
				HN = 1; //Finding the Lower Number
				LN = 5; //Finding the Higher Number

				for(t=0;t<1000;t++)
					{
						PORTE = 0b00000001;
						PORTD = display[LN];  //writing to LCD
						_delay(5000000); //setting time delay so we can see the lower number in a long enough time
					}
				for(t=0;t<1000;t++)
					{
						PORTE = 0b00000010;
						PORTD = display[HN]; //writing to LCD
						_delay(5000000); //setting time delay so we can see the higher number in a long enough time
					}
				LN = 0;
				HN = 0; //resetting write cache
				

}

void sevensegmentC(void)
{
int display[10] = {0b1111110, 0b0110000, 0b1101101, 0b1111001, 0b0110011, 0b1011011, 0b1011111, 0b1110000,0b1111111,0b1111011};   //CC lookup table
int  HN = 0, LN = 0;
int t;
				
						HN = getkeypad(); //Finding the Lower Number
						LN = getkeypad(); //Finding the Higher Number
						
						PORTE = 0b00000001;
						PORTD = display[LN];  //writing to LCD
						_delay(500); //setting time delay so we can see the lower number in a long enough time
						
						PORTE = 0b00000010;
						PORTD = display[HN]; //writing to LCD
						_delay(500); //setting time delay so we can see the higher number in a long enough time
                        
                        do{
                        warningsound();//beep boop beep boop danger
						(HN*10+LN)/1.1;
                        }while((HN*10+LN)>0);
                        
                        safetysound();
                        
}// end of seven segment

void safetysound(void){
int x;
for (x=0;x<30;x++)
        {
            PORTBbits.RB5=1;
            _delay(758);
            PORTBbits.RB5=0;
            _delay(758);
        }
        for(x=0;x<1500;x++)
        {
        PORTBbits.RB5=0;
        }
          for (x=0;x<30;x++)
        {
            PORTBbits.RB5=1;
            _delay(758);
            PORTBbits.RB5=0;
            _delay(758);
        }
        for(x=0;x<3000;x++)
        {
        PORTAbits.RA4=0;
        }
        for (x=0;x<30;x++)
        {
            PORTBbits.RB5=1;
            _delay(758);
            PORTBbits.RB5=0;
            _delay(758);
        }
        for(x=0;x<3000;x++)
        {
        PORTBbits.RB5=0;
        }
        for (x=0;x<30;x++)
        {
            PORTBbits.RB5=1;
            _delay(980);
            PORTBbits.RB5=0;
            _delay(980);
        }
        for(x=0;x<1000;x++)
        {
        PORTAbits.RA4=0;
        }
        for (x=0;x<30;x++)
        {
            PORTBbits.RB5=1;
            _delay(758);
            PORTBbits.RB5=0;
            _delay(758);
        }
        for(x=0;x<3000;x++)
        {
        PORTAbits.RA4=0;
        }
        for (x=0;x<30;x++)
        {
            PORTBbits.RB5=1;
            _delay(649);
            PORTBbits.RB5=0;
            _delay(649);
        }
         for(x=0;x<5500;x++)
        {
        PORTBbits.RB5=0;
        }
        for (x=0;x<30;x++)
        {
            PORTBbits.RB5=1;
            _delay(1316);
            PORTBbits.RB5=0;
            _delay(1316);
        }
         for(x=0;x<5750;x++)
        {
        PORTBbits.RB5=0;
        }
}//end of sound

void warningsound(void){
    int a;
    for(a=0;a<10;a++)
    {
        for(x=0;x<50;x++)
        {
            PORTBbits.RB5=1;
            _delay(630);
            PORTBbits.RB5=0;
            _delay(630);
        }
    
        for(x=0;x<30;x++)
        {
        PORTBbits.RB5=0;
        }
    }
}//end of sound

